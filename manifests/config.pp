# @summary A short summary of the purpose of this class
#
# A description of what this class does
#
# @example
#   include slurm::config
class slurm::config (
  Array $slurmctld_hosts = $slurm::slurmctld_hosts,
  Enum['YES', 'NO'] $disable_root_jobs = $slurm::disable_root_jobs,
  Enum['YES', 'NO'] $enforce_part_limits = $slurm::enforce_part_limits,
  Integer $first_job_id = $slurm::first_job_id,
  Integer $max_job_id = $slurm::max_job_id,
  Integer[0,1] $group_update_force = $slurm::group_update_force,
  Integer $group_update_time = $slurm::group_update_time,
  Integer[0,1] $job_file_append = $slurm::job_file_append,
  Integer[0,1] $job_requeue = $slurm::job_requeue,
  Integer[0,1] $job_submit_plugins = $slurm::job_submit_plugins,
  Integer[0,1] $kill_on_bad_exit = $slurm::kill_on_bad_exit,
  String $launch_type = $slurm::launch_type,
  String $mail_prog = $slurm::mail_prog,
  Integer $max_job_count = $slurm::max_job_count,
  Integer $max_step_count = $slurm::max_step_count,
  Integer $max_tasks_per_node = $slurm::max_tasks_per_node,
  String $mpi_default = $slurm::mpi_default,
  String $private_data = $slurm::private_data,
  String $proctrack_type = $slurm::proctrack_type,
  Integer[0,1] $propogate_prio_process = $slurm::propogate_prio_process,
  Integer[0,1] $return_to_service = $slurm::return_to_service,
  Stdlib::Absolutepath $slurmctld_pidfile = $::slurm::slurmctld_pidfile,
  Stdlib::Port $slurmctld_port = $slurm::slurmctld_port,
  Stdlib::Absolutepath $slurmd_pidfile = $slurm::slurmd_pidfile,
  Stdlib::Port $slurmd_port = $slurm::slurmd_port,
  String $slurmd_spool_dir = $slurm::slurmd_spool_dir,
  String $slurm_user = $slurm::slurm_user,
  String $task_plugin = $slurm::task_plugin,
  String $task_plugin_param = $slurm::task_plugin_param,
  Integer $batch_start_timeout = $slurm::batch_start_timeout,
  Integer $complete_wait = $slurm::complete_wait,
  Integer $get_env_timeout = $slurm::get_env_timeout,
  Integer $inactive_limit = $slurm::inactive_limit,
  Integer $kill_wait = $slurm::kill_wait,
  Integer $message_timeout = $slurm::message_timeout,
  Integer $resv_over_run = $slurm::resv_over_run,
  Integer $min_job_age = $slurm::min_job_age,
  Integer $over_time_limit = $slurm::over_time_limit,
  Integer $slurmctld_timeout = $slurm::slurmctld_timeout,
  Integer $slurmd_timeout = $slurm::slurmd_timeout,
  Integer $unkillable_step_timeout = $slurm::unkillable_step_timeout,
  Integer $wait_time = $slurm::wait_time,
  Integer $def_mem_per_cpu = $slurm::def_mem_per_cpu,
  Integer $max_mem_per_cpu = $slurm::max_mem_per_cpu,
  Integer $scheduler_time_slice = $slurm::scheduler_time_slice,
  String $scheduler_type = $slurm::scheduler_type,
  String $select_type = $slurm::select_type,
  String $select_type_parameters = $slurm::select_type_parameters,
  Enum['YES', 'NO'] $accounting_job_store_comment = $slurm::accounting_job_store_comment,
  String $cluster_name = $slurm::cluster_name,
  String $job_comp_type = $slurm::job_comp_type,
  String $job_container_type = $slurm::job_container_type,
  Integer $job_acct_gather_frequency = $slurm::job_acct_gather_frequency,
  String $job_acct_gather_type = $slurm::job_acct_gather_type,
  Enum['debug', 'error', 'warn', 'info'] $slurmctl_loglevel = $slurm::slurmctl_loglevel,
  Enum['debug', 'error', 'warn', 'info'] $slurmd_loglevel = $slurm::slurmd_loglevel,
  Variant[Hash, Undef] $compute_nodes = $slurm::compute_nodes,
  Variant[Hash, Undef] $partitions = $slurm::partitions,
) inherits slurm {
  require slurm::install
  include slurm::service

  file { '/etc/slurm-llnl/slurm.conf':
    ensure    => 'file',
    owner     => $slurm_user,
    group     => $slurm_user,
    mode      => '0640',
    content   => template('slurm/slurm.conf.erb'),
    notify    => Class['slurm::service'],
    subscribe => Class['slurm::install'],
  }
}
